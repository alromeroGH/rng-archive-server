package com.alerom.rng.archive.rng_archive_server.mappers;

import com.alerom.rng.archive.rng_archive_server.dto.request.create.NewsCreateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.request.update.NewsUpdateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.response.NewsResponseDTO;
import com.alerom.rng.archive.rng_archive_server.models.News;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

/**
 * Mapper interface for converting between News entity and DTOs.
 * This interface is processed by MapStruct to generate an implementation at compile time.
 */
@Mapper(componentModel = "spring")
public interface NewsMapper {

    /**
     * Converts a {@link NewsCreateDTO} to a {@link News} entity.
     * The 'id' field is ignored as it is generated by the database.
     *
     * @param newsCreateDTO The DTO containing the data for the new news item.
     * @return The new News entity.
     */
    @Mapping(target = "id", ignore = true)
    News toEntity(NewsCreateDTO newsCreateDTO);

    /**
     * Converts a {@link News} entity to a {@link NewsResponseDTO}.
     *
     * @param news The News entity to convert.
     * @return The corresponding NewsResponseDTO.
     */
    NewsResponseDTO toResponseDTO(News news);

    /**
     * Updates an existing {@link News} entity with data from a {@link NewsUpdateDTO}.
     * The 'id' field is ignored during the update process.
     *
     * @param news The existing News entity to be updated.
     * @param newsUpdateDTO The DTO containing the updated data.
     */
    @Mapping(target = "id", ignore = true)
    void updateEntityFromDTO(@MappingTarget News news, NewsUpdateDTO newsUpdateDTO);
}