package com.alerom.rng.archive.rng_archive_server.mappers;

import com.alerom.rng.archive.rng_archive_server.dto.request.create.PullCreateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.request.update.PullUpdateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.response.PullResponseDTO;
import com.alerom.rng.archive.rng_archive_server.models.Pull;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

/**
 * Mapper interface for converting between Pull entity and DTOs.
 * This interface is processed by MapStruct to generate an implementation at compile time.
 */
@Mapper(componentModel = "spring")
public interface PullMapper {

    /**
     * Converts a {@link PullCreateDTO} to a {@link Pull} entity.
     * The 'id' field is ignored as it is generated by the database.
     *
     * @param pullCreateDTO The DTO containing the data for the new pull record.
     * @return The new Pull entity.
     */
    @Mapping(target = "id", ignore = true)
    Pull toEntity(PullCreateDTO pullCreateDTO);

    /**
     * Converts a {@link Pull} entity to a {@link PullResponseDTO}.
     *
     * @param pull The Pull entity to convert.
     * @return The corresponding PullResponseDTO.
     */
    PullResponseDTO toResponseDTO(Pull pull);

    /**
     * Updates an existing {@link Pull} entity with data from a {@link PullUpdateDTO}.
     * The 'id' field is ignored during the update process.
     *
     * @param pull The existing Pull entity to be updated.
     * @param pullUpdateDTO The DTO containing the updated data.
     */
    @Mapping(target = "id", ignore = true)
    void updateEntityFromDTO(@MappingTarget Pull pull, PullUpdateDTO pullUpdateDTO);
}