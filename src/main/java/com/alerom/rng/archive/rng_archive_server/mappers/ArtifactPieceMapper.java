package com.alerom.rng.archive.rng_archive_server.mappers;

import com.alerom.rng.archive.rng_archive_server.dto.request.create.ArtifactPieceCreateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.request.update.ArtifactPieceUpdateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.response.ArtifactPieceResponseDTO;
import com.alerom.rng.archive.rng_archive_server.models.ArtifactPiece;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

/**
 * Mapper interface for converting between ArtifactPiece entity and DTOs.
 * This interface is processed by MapStruct to generate an implementation at compile time.
 */
@Mapper(componentModel = "spring")
public interface ArtifactPieceMapper {

    /**
     * Converts an {@link ArtifactPieceCreateDTO} to an {@link ArtifactPiece} entity.
     * The 'id' field is ignored as it is generated by the database.
     *
     * @param artifactPieceCreateDTO The DTO containing the data for the new artifact piece.
     * @return The new ArtifactPiece entity.
     */
    @Mapping(target = "id", ignore = true)
    ArtifactPiece toEntity(ArtifactPieceCreateDTO artifactPieceCreateDTO);

    /**
     * Converts an {@link ArtifactPiece} entity to an {@link ArtifactPieceResponseDTO}.
     *
     * @param artifactPiece The ArtifactPiece entity to convert.
     * @return The corresponding ArtifactPieceResponseDTO.
     */
    ArtifactPieceResponseDTO toResponseDTO(ArtifactPiece artifactPiece);

    /**
     * Updates an existing {@link ArtifactPiece} entity with data from an {@link ArtifactPieceUpdateDTO}.
     * The 'id' field is ignored during the update process.
     *
     * @param artifactPiece The existing ArtifactPiece entity to be updated.
     * @param artifactPieceUpdateDTO The DTO containing the updated data.
     */
    @Mapping(target = "id", ignore = true)
    void updateEntityFromDTO(@MappingTarget ArtifactPiece artifactPiece, ArtifactPieceUpdateDTO artifactPieceUpdateDTO);
}