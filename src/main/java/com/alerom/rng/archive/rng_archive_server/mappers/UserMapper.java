package com.alerom.rng.archive.rng_archive_server.mappers;

import com.alerom.rng.archive.rng_archive_server.dto.request.create.UserCreateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.request.update.UserUpdateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.response.UserResponseDTO;
import com.alerom.rng.archive.rng_archive_server.models.User;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

/**
 * Mapper interface for converting between User entity and DTOs.
 * This interface is processed by MapStruct to generate an implementation at compile time.
 */
@Mapper(componentModel = "spring")
public interface UserMapper {

    /**
     * Converts a {@link UserCreateDTO} to a {@link User} entity.
     * The 'id' field is ignored as it is generated by the database.
     *
     * @param userCreateDTO The DTO containing the data for the new user.
     * @return The new User entity.
     */
    @Mapping(target = "id", ignore = true)
    User toEntity(UserCreateDTO userCreateDTO);

    /**
     * Converts a {@link User} entity to a {@link UserResponseDTO}.
     *
     * @param user The User entity to convert.
     * @return The corresponding UserResponseDTO.
     */
    UserResponseDTO toResponseDTO(User user);

    /**
     * Updates an existing {@link User} entity with data from a {@link UserUpdateDTO}.
     * The 'id' field is ignored during the update process.
     *
     * @param user The existing User entity to be updated.
     * @param userUpdateDTO The DTO containing the updated data.
     */
    @Mapping(target = "id", ignore = true)
    void updateEntityFromDTO(@MappingTarget User user, UserUpdateDTO userUpdateDTO);
}