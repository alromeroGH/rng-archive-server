package com.alerom.rng.archive.rng_archive_server.mappers;

import com.alerom.rng.archive.rng_archive_server.dto.request.create.UserArtifactCreateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.request.update.UserArtifactUpdateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.response.UserArtifactResponseDTO;
import com.alerom.rng.archive.rng_archive_server.models.UserArtifact;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

/**
 * Mapper interface for converting between UserArtifact entity and DTOs.
 * This interface is processed by MapStruct to generate an implementation at compile time.
 */
@Mapper(componentModel = "spring")
public interface UserArtifactMapper {

    /**
     * Converts a {@link UserArtifactCreateDTO} to a {@link UserArtifact} entity.
     * The 'id' field is ignored as it is generated by the database.
     *
     * @param userArtifactCreateDTO The DTO containing the data for the new user artifact.
     * @return The new UserArtifact entity.
     */
    @Mapping(target = "id", ignore = true)
    UserArtifact toEntity(UserArtifactCreateDTO userArtifactCreateDTO);

    /**
     * Converts a {@link UserArtifact} entity to a {@link UserArtifactResponseDTO}.
     *
     * @param userArtifact The UserArtifact entity to convert.
     * @return The corresponding UserArtifactResponseDTO.
     */
    UserArtifactResponseDTO toResponseDTO(UserArtifact userArtifact);

    /**
     * Updates an existing {@link UserArtifact} entity with data from a {@link UserArtifactUpdateDTO}.
     * The 'id' field is ignored during the update process.
     *
     * @param userArtifact The existing UserArtifact entity to be updated.
     * @param userArtifactUpdateDTO The DTO containing the updated data.
     */
    @Mapping(target = "id", ignore = true)
    void updateEntityFromDTO(@MappingTarget UserArtifact userArtifact, UserArtifactUpdateDTO userArtifactUpdateDTO);
}