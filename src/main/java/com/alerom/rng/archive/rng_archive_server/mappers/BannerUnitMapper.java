package com.alerom.rng.archive.rng_archive_server.mappers;

import com.alerom.rng.archive.rng_archive_server.dto.request.create.BannerUnitCreateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.request.update.BannerUnitUpdateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.response.BannerUnitResponseDTO;
import com.alerom.rng.archive.rng_archive_server.models.BannerUnit;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

/**
 * Mapper interface for converting between BannerUnit entity and DTOs.
 * This interface is processed by MapStruct to generate an implementation at compile time.
 */
@Mapper(componentModel = "spring")
public interface BannerUnitMapper {

    /**
     * Converts a {@link BannerUnitCreateDTO} to a {@link BannerUnit} entity.
     * The 'id' field is ignored as it is generated by the database.
     *
     * @param bannerUnitCreateDTO The DTO containing the data for the new banner-unit relationship.
     * @return The new BannerUnit entity.
     */
    @Mapping(target = "id", ignore = true)
    BannerUnit toEntity(BannerUnitCreateDTO bannerUnitCreateDTO);

    /**
     * Converts a {@link BannerUnit} entity to a {@link BannerUnitResponseDTO}.
     *
     * @param bannerUnit The BannerUnit entity to convert.
     * @return The corresponding BannerUnitResponseDTO.
     */
    BannerUnitResponseDTO toResponseDTO(BannerUnit bannerUnit);

    /**
     * Updates an existing {@link BannerUnit} entity with data from a {@link BannerUnitUpdateDTO}.
     * The 'id' field is ignored during the update process.
     *
     * @param bannerUnit The existing BannerUnit entity to be updated.
     * @param bannerUnitUpdateDTO The DTO containing the updated data.
     */
    @Mapping(target = "id", ignore = true)
    void updateEntityFromDTO(@MappingTarget BannerUnit bannerUnit, BannerUnitUpdateDTO bannerUnitUpdateDTO);
}