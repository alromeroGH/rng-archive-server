package com.alerom.rng.archive.rng_archive_server.mappers;

import com.alerom.rng.archive.rng_archive_server.dto.request.create.UnitCreateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.request.update.UnitUpdateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.response.UnitResponseDTO;
import com.alerom.rng.archive.rng_archive_server.models.Unit;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

/**
 * Mapper interface for converting between Unit entity and DTOs.
 * This interface is processed by MapStruct to generate an implementation at compile time.
 */
@Mapper(componentModel = "spring")
public interface UnitMapper {

    /**
     * Converts a {@link UnitCreateDTO} to a {@link Unit} entity.
     * The 'id' field is ignored as it is generated by the database.
     *
     * @param unitCreateDTO The DTO containing the data for the new unit.
     * @return The new Unit entity.
     */
    @Mapping(target = "id", ignore = true)
    Unit toEntity(UnitCreateDTO unitCreateDTO);

    /**
     * Converts a {@link Unit} entity to a {@link UnitResponseDTO}.
     *
     * @param unit The Unit entity to convert.
     * @return The corresponding UnitResponseDTO.
     */
    UnitResponseDTO toResponseDTO(Unit unit);

    /**
     * Updates an existing {@link Unit} entity with data from a {@link UnitUpdateDTO}.
     * The 'id' field is ignored during the update process.
     *
     * @param unit The existing Unit entity to be updated.
     * @param unitUpdateDTO The DTO containing the updated data.
     */
    @Mapping(target = "id", ignore = true)
    void updateEntityFromDTO(@MappingTarget Unit unit, UnitUpdateDTO unitUpdateDTO);
}