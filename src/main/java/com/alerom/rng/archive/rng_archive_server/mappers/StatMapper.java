package com.alerom.rng.archive.rng_archive_server.mappers;

import com.alerom.rng.archive.rng_archive_server.dto.request.create.StatCreateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.request.update.StatUpdateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.response.StatResponseDTO;
import com.alerom.rng.archive.rng_archive_server.models.Stat;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

/**
 * Mapper interface for converting between Stat entity and DTOs.
 * This interface is processed by MapStruct to generate an implementation at compile time.
 */
@Mapper(componentModel = "spring")
public interface StatMapper {

    /**
     * Converts a {@link StatCreateDTO} to a {@link Stat} entity.
     * The 'id' field is ignored as it is generated by the database.
     *
     * @param statCreateDTO The DTO containing the data for the new stat.
     * @return The new Stat entity.
     */
    @Mapping(target = "id", ignore = true)
    Stat toEntity(StatCreateDTO statCreateDTO);

    /**
     * Converts a {@link Stat} entity to a {@link StatResponseDTO}.
     *
     * @param stat The Stat entity to convert.
     * @return The corresponding StatResponseDTO.
     */
    StatResponseDTO toResponseDTO(Stat stat);

    /**
     * Updates an existing {@link Stat} entity with data from a {@link StatUpdateDTO}.
     * The 'id' field is ignored during the update process.
     *
     * @param stat The existing Stat entity to be updated.
     * @param statUpdateDTO The DTO containing the updated data.
     */
    @Mapping(target = "id", ignore = true)
    void updateEntityFromDTO(@MappingTarget Stat stat, StatUpdateDTO statUpdateDTO);
}