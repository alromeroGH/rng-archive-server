package com.alerom.rng.archive.rng_archive_server.mappers;

import com.alerom.rng.archive.rng_archive_server.dto.request.create.BannerCreateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.request.update.BannerUpdateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.response.BannerResponseDTO;
import com.alerom.rng.archive.rng_archive_server.models.Banner;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

/**
 * Mapper interface for converting between Banner entity and DTOs.
 * This interface is processed by MapStruct to generate an implementation at compile time.
 */
@Mapper(componentModel = "spring")
public interface BannerMapper {

    /**
     * Converts a {@link BannerCreateDTO} to a {@link Banner} entity.
     * The 'id' field is ignored as it is generated by the database.
     *
     * @param bannerCreateDTO The DTO containing the data for the new banner.
     * @return The new Banner entity.
     */
    @Mapping(target = "id", ignore = true)
    Banner toEntity(BannerCreateDTO bannerCreateDTO);

    /**
     * Converts a {@link Banner} entity to a {@link BannerResponseDTO}.
     *
     * @param banner The Banner entity to convert.
     * @return The corresponding BannerResponseDTO.
     */
    BannerResponseDTO toResponseDTO(Banner banner);

    /**
     * Updates an existing {@link Banner} entity with data from a {@link BannerUpdateDTO}.
     * The 'id' field is ignored during the update process.
     *
     * @param banner The existing Banner entity to be updated.
     * @param bannerUpdateDTO The DTO containing the updated data.
     */
    @Mapping(target = "id", ignore = true)
    void updateEntityFromDTO(@MappingTarget Banner banner, BannerUpdateDTO bannerUpdateDTO);
}