package com.alerom.rng.archive.rng_archive_server.mappers;

import com.alerom.rng.archive.rng_archive_server.dto.request.create.PullUnitCreateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.request.update.PullUnitUpdateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.response.PullUnitResponseDTO;
import com.alerom.rng.archive.rng_archive_server.models.PullUnit;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

/**
 * Mapper interface for converting between PullUnit entity and DTOs.
 * This interface is processed by MapStruct to generate an implementation at compile time.
 */
@Mapper(componentModel = "spring")
public interface PullUnitMapper {

    /**
     * Converts a {@link PullUnitCreateDTO} to a {@link PullUnit} entity.
     * The 'id' field is ignored as it is generated by the database.
     *
     * @param pullUnitCreateDTO The DTO containing the data for the new pull-unit relationship.
     * @return The new PullUnit entity.
     */
    @Mapping(target = "id", ignore = true)
    PullUnit toEntity(PullUnitCreateDTO pullUnitCreateDTO);

    /**
     * Converts a {@link PullUnit} entity to a {@link PullUnitResponseDTO}.
     *
     * @param pullUnit The PullUnit entity to convert.
     * @return The corresponding PullUnitResponseDTO.
     */
    PullUnitResponseDTO toResponseDTO(PullUnit pullUnit);

    /**
     * Updates an existing {@link PullUnit} entity with data from a {@link PullUnitUpdateDTO}.
     * The 'id' field is ignored during the update process.
     *
     * @param pullUnit The existing PullUnit entity to be updated.
     * @param pullUnitUpdateDTo The DTO containing the updated data.
     */
    @Mapping(target = "id", ignore = true)
    void updateEntityFromDTO(@MappingTarget PullUnit pullUnit, PullUnitUpdateDTO pullUnitUpdateDTo);
}