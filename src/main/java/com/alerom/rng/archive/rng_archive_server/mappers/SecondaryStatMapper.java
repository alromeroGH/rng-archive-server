package com.alerom.rng.archive.rng_archive_server.mappers;

import com.alerom.rng.archive.rng_archive_server.dto.request.create.SecondaryStatCreateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.request.update.SecondaryStatUpdateDTO;
import com.alerom.rng.archive.rng_archive_server.dto.response.SecondaryStatResponseDTO;
import com.alerom.rng.archive.rng_archive_server.models.SecondaryStat;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

/**
 * Mapper interface for converting between SecondaryStat entity and DTOs.
 * This interface is processed by MapStruct to generate an implementation at compile time.
 */
@Mapper(componentModel = "spring")
public interface SecondaryStatMapper {

    /**
     * Converts a {@link SecondaryStatCreateDTO} to a {@link SecondaryStat} entity.
     * The 'id' field is ignored as it is generated by the database.
     *
     * @param secondaryStatCreateDTO The DTO containing the data for the new secondary stat.
     * @return The new SecondaryStat entity.
     */
    @Mapping(target = "id", ignore = true)
    SecondaryStat toEntity(SecondaryStatCreateDTO secondaryStatCreateDTO);

    /**
     * Converts a {@link SecondaryStat} entity to a {@link SecondaryStatResponseDTO}.
     *
     * @param secondaryStat The SecondaryStat entity to convert.
     * @return The corresponding SecondaryStatResponseDTO.
     */
    SecondaryStatResponseDTO toResponseDTO(SecondaryStat secondaryStat);

    /**
     * Updates an existing {@link SecondaryStat} entity with data from a {@link SecondaryStatUpdateDTO}.
     * The 'id' field is ignored during the update process.
     *
     * @param secondaryStat The existing SecondaryStat entity to be updated.
     * @param secondaryStatUpdateDTO The DTO containing the updated data.
     */
    @Mapping(target = "id", ignore = true)
    void updateEntityFromDTO(@MappingTarget SecondaryStat secondaryStat, SecondaryStatUpdateDTO secondaryStatUpdateDTO);
}